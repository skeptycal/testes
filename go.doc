package testes // import "github.com/skeptycal/testes"

const UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" ...
const ReplacementChar rune = '\uFFFD'
var LimitResult bool ...
var NewAnyValue = types.NewAnyValue
var ValueOf = types.ValueOf
func AssertDeepEqual(t *testing.T, name string, got, want Any) bool
func AssertEqual(t *testing.T, name string, got, want Any) bool
func AssertKindEqual(t *testing.T, name string, got, want Any) bool
func AssertNotEqual(t *testing.T, name string, got, want Any) bool
func AssertSameFunc(t *testing.T, name string, got, want Any, args ...reflect.Value) bool
func AssertSameKind(t *testing.T, name string, got, want Any) bool
func AssertSameType(t *testing.T, name string, got, want Any) bool
func Conj(c complex128) complex128
func Contains(needle Any, haystack []Any) bool
func Example()
func GetFuncResult(t *testing.T, name string, fn Any, args ...reflect.Value) ([]reflect.Value, error)
func IsKindEqual(got, want Any) bool
func RandomString(n int) string
func TError(t *testing.T, name string, got, want Any)
func TErrorf(t *testing.T, formatString, name string, got, want Any)
func TName(testname, funcname, argname Any) string
func TRun(t *testing.T, name string, got, want Any)
func TRunTest(t *testing.T, tt *test)
func TTypeError(t *testing.T, name string, got, want Any)
func TTypeRun(t *testing.T, name string, got, want Any, wantErr bool)
type Any = types.Any
    func RandomData(useInvalid bool) Any
type AnyValue = types.AnyValue
type Assert interface{ ... }
type Custom interface{ ... }
type GetSetter interface{ ... }
type Random interface{ ... }
type Tester interface{ ... }
    func NewTest(t *testing.T, name string, in, got, want Any, wantErr bool) Tester
    func NewTestSet(t *testing.T, name string, list []Tester) Tester
